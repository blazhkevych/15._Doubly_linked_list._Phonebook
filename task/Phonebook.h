#pragma once
#include "List_t.h"

struct Abonent
{
	char m_name[100]{ '\n' };
	char m_surname[100]{ '\n' };
	char m_address[100]{ '\n' };
	char m_phone[100]{ '\n' };
	int m_age;

	// Перегрузка оператора ">" для "this > object".
	bool operator > (const Abonent& abonent) const;
};

class Phonebook
{
	List<Abonent>m_lst;
public:
	// Добавление абонентов в телефонный справочник.
	void AddAbonent();

	// Удаление абонентов из телефонного справочника по позиции.
	void DeleteAbonent();

	// Модификация данных абонента.
	void SubscriberDataModification();

	// Поиск абонентов по телефонному номеру или фамилии.
	void SearchSubscriberBySurname();

	// Распечатка абонентов в алфавитном порядке.
	void PrintSubscribersInAscending();

	/* Добавление абонентов в телефонный справочник(запрос на ввод новых данных и заброска в List). addhead
	 Удаление абонентов из телефонного справочника(удаление по имени/фамилии или комбинации, или по номеру).delhead/delpositionили еще что-то,
	вывести позицию лучше и удалять по ней.
	 Модификация данных абонента(печать, выбрать позицию и дать возможность редактировать поля).
	 Поиск абонентов по телефонному номеру или фамилии.
	 Распечатка абонентов в алфавитном порядке(сделать копию, отсортировать и вывести).
	 Сохранение телефонного справочника в файл(бинарный или текстовый, со стрингом могут проблемы(попробовать писать или заменить на массивы чар фиксированные)
	, возможно использовать itoa/atoi). Глянуть проект библиотека из процедурки.
	 Загрузка телефонного справочника из файла.*/


	// Вывод главного меню.
	static void PrintMainMenu();

	// Вывод "шапки" списка абонентов.
	void PrintPhonebookHeader();

	// Вывод списка абоненток.
	void PrintPhonebook();

	// Сохранение телефонного справочника в файл.
	void SavePhonebookIntoFile();

	// Чтение телефонного справочника из файла.
	void LoadPhonebookFromFile();
};
